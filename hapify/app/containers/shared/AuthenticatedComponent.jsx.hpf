import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { get } from 'lodash';
 
import { isUserAgentMobile } from '../../utils/DeviceUtils';
 
import { loadOption } from '../../store/modules/options';

<<@ M /pMHd m>>
import { load<<m AA>>s } from '../../store/modules/entities/<<m aA>>s';
<<@>>
 
import { isAdmin, isUser } from '../../utils/RolesUtils';
 
class AuthenticatedComponent extends React.PureComponent {
  constructor (props) {
    super(props);
    this.state = { preventRender: true };
  }
 
  static getDerivedStateFromProps (props) {
    // Waiting for appstorage loading
    if (props.loaded.appstorage === '') {
      return { preventRender: true };
    }
 
    const redirectLocation = (pathname = null) => {
      if (pathname !== null) {
        props.history.replace(pathname);
      }
      return { preventRender: true };
    };
 
    // Check router path
    if (!props.user) {
      // oops, not logged in, so can't be here!
      return redirectLocation(props.location.pathname !== '/session/sign-in'
        ? `/session/sign-in?next=${props.location.pathname}`
        : null);
    }
    if (props.location.pathname.indexOf('/user') === 0 && !isUser(props.user) && !isAdmin(props.user)) {
      // Only User access to /user
      return redirectLocation('/');
    }
    if (props.location.pathname.indexOf('/admin/') === 0 && !isAdmin(props.user)) {
      // Only Admin access to /admin
      return redirectLocation('/');
    }
 
    // Load application data if not currently loaded
    const isNotLoaded = (entityKey) => get(props, `loaded.${entityKey}`) === '';
    if (isNotLoaded('options')) {
      props.loadOption('welcomeMessage');
    }
    // Only Admins
    if (isAdmin(props.user)) {
      <<@ M /pMHd m>>
      if (isNotLoaded('<<m aA>>s')) {
        props.load<<m AA>>s();
      }
      <<@>>
    }
    // Only desktop
    if (!isUserAgentMobile) {
    }
 
    return { preventRender: false };
  }
 
  render () {
    const {
      children, match,
    } = this.props;
    const { preventRender } = this.state;
 
    return !preventRender && children
      ? React.cloneElement(children, { match })
      : null;
  }
}
 
AuthenticatedComponent.propTypes = {
  loadOption: PropTypes.func.isRequired,
 
  <<@ M /pMHd m>>
  load<<m AA>>s: PropTypes.func.isRequired,
  <<@>>
 
  children: PropTypes.node.isRequired,
 
  user: PropTypes.shape({
    role: PropTypes.string.isRequired,
  }),
  location: PropTypes.shape({
    pathname: PropTypes.string.isRequired,
  }).isRequired,
  history: PropTypes.shape({
    replace: PropTypes.func.isRequired,
  }).isRequired,
  loaded: PropTypes.shape({
    appstorage: PropTypes.string.isRequired,
    options: PropTypes.string.isRequired,
 
    <<@ M /pMHd m>>
    <<m aA>>s: PropTypes.string.isRequired,
    <<@>>
  }).isRequired,
  match: PropTypes.shape().isRequired,
};
 
export default connect(
  (state) => ({
    user: state.auth.user,
    loaded: state.data.loaded,
  }),
  {
    loadOption,
 
    <<@ M /pMHd m>>
    load<<m AA>>s,
    <<@>>
  },
)(withRouter(AuthenticatedComponent));
