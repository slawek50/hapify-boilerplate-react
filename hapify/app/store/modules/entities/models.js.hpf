import { flow, set } from 'lodash/fp';
import { omit } from 'lodash';
 
import { CALL_API, Schemas } from '../../Schemas';
 
const FETCH_ALL_<<Model constant>>S_REQUEST = 'rswa/<<Model camel>>s/FETCH_ALL_<<Model constant>>S_REQUEST';
export const FETCH_ALL_<<Model constant>>S_SUCCESS = 'rswa/<<Model camel>>s/FETCH_ALL_<<Model constant>>S_SUCCESS';
const FETCH_ALL_<<Model constant>>S_FAILURE = 'rswa/<<Model camel>>s/FETCH_ALL_<<Model constant>>S_FAILURE';
const FETCH_<<Model constant>>_REQUEST = 'rswa/<<Model camel>>s/FETCH_<<Model constant>>_REQUEST';
const FETCH_<<Model constant>>_SUCCESS = 'rswa/<<Model camel>>s/FETCH_<<Model constant>>_SUCCESS';
const FETCH_<<Model constant>>_FAILURE = 'rswa/<<Model camel>>s/FETCH_<<Model constant>>_FAILURE';
const CREATE_<<Model constant>>_REQUEST = 'rswa/<<Model camel>>s/CREATE_<<Model constant>>_REQUEST';
const CREATE_<<Model constant>>_SUCCESS = 'rswa/<<Model camel>>s/CREATE_<<Model constant>>_SUCCESS';
const CREATE_<<Model constant>>_FAILURE = 'rswa/<<Model camel>>s/CREATE_<<Model constant>>_FAILURE';
const UPDATE_<<Model constant>>_REQUEST = 'rswa/<<Model camel>>s/UPDATE_<<Model constant>>_REQUEST';
const UPDATE_<<Model constant>>_SUCCESS = 'rswa/<<Model camel>>s/UPDATE_<<Model constant>>_SUCCESS';
const UPDATE_<<Model constant>>_FAILURE = 'rswa/<<Model camel>>s/UPDATE_<<Model constant>>_FAILURE';
const DELETE_<<Model constant>>_REQUEST = 'rswa/<<Model camel>>s/DELETE_<<Model constant>>_REQUEST';
const DELETE_<<Model constant>>_SUCCESS = 'rswa/<<Model camel>>s/DELETE_<<Model constant>>_SUCCESS';
const DELETE_<<Model constant>>_FAILURE = 'rswa/<<Model camel>>s/DELETE_<<Model constant>>_FAILURE';
 
export const <<Model camel>>sActionsHandlers = {
  [FETCH_ALL_<<Model constant>>S_REQUEST]: (state) => flow(
    set('loaded.<<Model camel>>s', 'loading'),
  )(state),
  [FETCH_ALL_<<Model constant>>S_SUCCESS]: (state, action) => flow(
    set('entities.<<Model camel>>s', action.response.entities.<<Model camel>>s || {}),
    set('loaded.<<Model camel>>s', 'loaded'),
  )(state),
  [FETCH_ALL_<<Model constant>>S_FAILURE]: (state) => flow(
    set('loaded.<<Model camel>>s', 'error'),
  )(state),
  [FETCH_<<Model constant>>_SUCCESS]: (state, action) => flow(
    set('entities.<<Model camel>>s', action.response.entities.<<Model camel>>s),
  )(state),
  [CREATE_<<Model constant>>_SUCCESS]: (state, action) => flow(
    set('entities.<<Model camel>>s', {
      ...state.entities.<<Model camel>>s,
      ...action.response.entities.<<Model camel>>s,
    }),
  )(state),
  [DELETE_<<Model constant>>_SUCCESS]: (state, action) => flow(
    set('entities.<<Model camel>>s', omit(state.entities.<<Model camel>>s, action.id)),
  )(state),
};
 
export function load<<Model pascal>> (id) {
  return {
    id,
    [CALL_API]: {
      types: [
        FETCH_<<Model constant>>_REQUEST,
        FETCH_<<Model constant>>_SUCCESS,
        FETCH_<<Model constant>>_FAILURE,
      ],
      method: 'GET',
      endpoint: `/admin/<<Model kebab>>/${id}`,
      schema: Schemas.<<Model constant>>,
    },
  };
}
 
export function load<<Model pascal>>s () {
  return {
    [CALL_API]: {
      types: [
        FETCH_ALL_<<Model constant>>S_REQUEST,
        FETCH_ALL_<<Model constant>>S_SUCCESS,
        FETCH_ALL_<<Model constant>>S_FAILURE,
      ],
      method: 'GET',
      endpoint: '/admin/<<Model kebab>>?_page=0&_limit=10',
      schema: Schemas.<<Model constant>>_ARRAY,
      // successMessage: '<<Model capital>>s fetched successfully',
    },
  };
}
 
export function create<<Model pascal>> (<<Model camel>>) {
  return {
    [CALL_API]: {
      types: [
        CREATE_<<Model constant>>_REQUEST,
        CREATE_<<Model constant>>_SUCCESS,
        CREATE_<<Model constant>>_FAILURE,
      ],
      method: 'POST',
      endpoint: '/admin/<<Model kebab>>',
      schema: Schemas.<<Model constant>>,
      body: <<Model camel>>,
      successMessage: '<<Model capital>>s created successfully',
    },
  };
}
 
export function update<<Model pascal>> (<<Model camel>>) {
  return {
    [CALL_API]: {
      types: [
        UPDATE_<<Model constant>>_REQUEST,
        UPDATE_<<Model constant>>_SUCCESS,
        UPDATE_<<Model constant>>_FAILURE,
      ],
      method: 'PATCH',
      endpoint: `/admin/<<Model kebab>>/${<<Model camel>>.<<PrimaryField raw>>}`,
      body: {
        <<for Fields not hidden and not primary and not internal f>>
        <<f snake>>: <<Model camel>>.<<f snake>>,
        <<endfor>>
      },
      successMessage: '<<Model capital>>s updated successfully',
      successNext: [
        () => load<<Model pascal>>(<<Model camel>>.<<PrimaryField raw>>),
      ],
    },
  };
}
 
export function delete<<Model pascal>> (id) {
  return {
    id,
    [CALL_API]: {
      types: [
        DELETE_<<Model constant>>_REQUEST,
        DELETE_<<Model constant>>_SUCCESS,
        DELETE_<<Model constant>>_FAILURE,
      ],
      method: 'DELETE',
      endpoint: `/admin/<<Model kebab>>/${id}`,
      successMessage: '<<Model capital>>s deleted successfully',
    },
  };
}
