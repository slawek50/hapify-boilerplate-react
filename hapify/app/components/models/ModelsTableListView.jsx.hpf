import React from 'react';
import PropTypes from 'prop-types';
import { withRouter, NavLink } from 'react-router-dom';
<<if Fields entity and not hidden and not primary>>
import { connect } from 'react-redux';
<<endif>>
import { capitalize<<if Fields entity and not hidden and not primary>>, get<<endif>><<if Fields multiple and not hidden>>, map<<endif>> } from 'lodash';
<<if Fields datetime and not hidden and not primary>>
import moment from 'moment';
<<endif>>
import Modal from 'antd/lib/modal';
import Button from 'antd/lib/button';
import Tooltip from 'antd/lib/tooltip';
import { EditOutlined, DeleteOutlined } from '@ant-design/icons';
 
<<= getImportConstants() >>
 
import TableListView from '../shared/TableListView';
 
const <<Model pascal>>sTableListView = ({
  history: { push }, <<Model camel>>s, baseUrl, onClickDelete<<for Dependencies not embedded d>>, <<d camel>>s<<endfor>>,
}) => (
  <TableListView
    title="Table de <<Model capital>>s"
    className=""
    data={<<Model camel>>s}
    cols={{
    <<for Fields not hidden f>>
      <<f snake>>: {
        label: '<<f capital>>',
        className: 'col_sm-12',
        render: <<= renderProp(f) >>,
      },
    <<endfor>>
    }}
    <<= getSearch(root.fields)>>
    searchLabel="Rechercher un <<Model capital>>"
    <<= getSort(root.fields)>>
    buttons={(
      <div>
        <NavLink to={`${baseUrl}/new`}>
          <Button>Cr√©er un <<Model capital>></Button>
        </NavLink>
      </div>
    )}
    rowButtons={(<<Model camel>>) => (
      <div className="col-2_sm-12">
        <div className="td td-buttons">
          {<<Model camel>> && (
            <NavLink to={`${baseUrl}/${<<Model camel>>.<<PrimaryField raw>>}/edit`}>
              <Tooltip title="Modifier">
                <Button icon={<EditOutlined />} />
              </Tooltip>
            </NavLink>
          )}
          {<<Model camel>> && (
            <Tooltip title="Supprimer">
              <Button
                icon={<DeleteOutlined />}
                onClick={() => Modal.confirm({
                  title: 'Voulez-vous vraiment effacer le <<Model capital>> ?',
                  icon: <DeleteOutlined />,
                  okText: 'Oui',
                  okType: 'danger',
                  cancelText: 'Non',
                  onOk: () => onClickDelete(<<Model camel>>.<<PrimaryField raw>>),
                })}
              />
            </Tooltip>
          )}
        </div>
      </div>
    )}
    onClickRow={(<<Model camel>>) => push(`${baseUrl}/${<<Model camel>>.<<PrimaryField raw>>}`)}
  />
);
 
<<Model pascal>>sTableListView.propTypes = {
  <<Model camel>>s: PropTypes.objectOf(PropTypes.shape({
    <<for Fields not hidden f>>
    <<f snake>>: PropTypes.<<= getPropsType(f) >><<if f not nullable>>.isRequired<<endif>>,
    <<endfor>>
  })).isRequired,
  <<if Fields entity and not hidden and not primary>>
 
  <<for Dependencies not embedded d>>
  <<d camel>>s: PropTypes.objectOf(PropTypes.shape()),
  <<endfor>>
  <<endif>>
 
  baseUrl: PropTypes.string.isRequired,
  onClickDelete: PropTypes.func,
 
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
  }).isRequired,
};
 
export default <<if Fields entity>>connect(
  (state) => ({
    <<for Dependencies not embedded d>>
    <<d camel>>s: state.data.entities.<<d camel>>s,
    <<endfor>>
  }),
)(<<endif>>withRouter(<<Model pascal>>sTableListView)<<if Fields entity>>)<<endif>>;

<<<
function hasType(type, subtype) {
    return root.fields.list.filter(
        f => !f.hidden && (f.type === type || f.subtype === type) && (!subtype || f.subtype !== subtype)
    ).length > 0;
}

function getImportConstants() {
    const imports = new Set([]);
    if (hasType('datetime')) imports.add('DATE_FORMAT');
    if (hasType('file')) imports.add('UPLOADS_URL');

    return imports.size > 0
        ? `\rimport { ${[...imports].join(', ')} } from '../../configs/Constants';`
        : '';
}

function getPropsType(field) {
    var customPropsTypes = {
        datetime: 'number',
        boolean: 'bool',
        entity: 'string',
        file: 'string',
    };

    const component = customPropsTypes[field.subtype] || customPropsTypes[field.type] || field.type;
    if (field.multiple) {
        return `arrayOf(PropTypes.${component}${field.nullable ? '' : '.isRequired'})`;
    }
    return component;
}

function renderProp(field) {
    let render = 'capitalize';
    if (field.type === 'file') {
        render = `(img) => <a href={\`\${UPLOADS_URL}/\${img}\`} target="_blank" rel="noopener noreferrer">{img}</a>`;
    } else if (field.type === 'entity' && !field.embedded) {
        render = `(id) => get(${field.model.names.camel}s, \`\${id}.${field.model.fields.lb[0] ? field.model.fields.lb[0].names.snake : field.model.fields.primary.names.raw}\`)`;
    } else if (field.type === 'entity' && field.embedded) {
        render = `(${field.names.camel}) => capitalize(${field.names.camel}.${field.model.fields.lb[0] ? field.model.fields.lb[0].names.snake : field.model.fields.primary.names.raw})`;
    } else if (field.type === 'datetime') {
        render = `(date) => moment(date).format(DATE_FORMAT)`;
    }
    if (field.multiple) {
        return `(multipleItems) => map(multipleItems, ${render}).join(', ')`;
    }
    return render;
}

function getSearch(fields) {
    if (fields.lb && fields.lb.length > 1) {
        return `search={['${fields.lb.map((lb) => lb.names.snake).join("', '")}']}`;
    } else if (fields.lb && fields.lb.length === 1) {
        return `search="${fields.lb[0].names.snake}"`;
    }
    return '';
}

function getSort(fields) {
    if (fields.lb && fields.lb.length > 0) {
        return `sortByDefault="${fields.lb[0].names.snake}"
    sortOrderDefault="desc"`;
    }
    return '';
}
>>>
