import React from 'react';
import PropTypes from 'prop-types';
<<? F tE+tF/hd/pr>>
import { connect } from 'react-redux';
<<?>>
import { reduxForm, Field } from 'redux-form';
import { NavLink } from 'react-router-dom';
<<? F tSe/hd/pr>>
import isEmail from 'validator/lib/isEmail';
<<?>>
<<= getImportLodash() >>
import {
  <<= getImportFieldComponents() >>
} from '../elements';
<<? F tF/hd/pr>>
 
import { uploadFiles, removeFile } from '../../store/modules/uploads';
 
import { UPLOADS_URL } from '../../configs/Constants';
<<?>>
 
const <<M AA>>EditForm = ({
  handleSubmit, baseUrl,<<? F tF/hd/pr>> upFiles, rmFile,<<?>><<@ F tE/hd/pr f>> <<f.model aA>>s,<<@>>
}) => (
  <form onSubmit={handleSubmit}>
    <div className="grid">
      <<@ F /hd/pr/in f>>
      <<= getComponent(f) >>
      <<@>>
    </div>
 
    <div className="btn-group right">
      <button className="btn" type="submit">
        Enregistrer
      </button>
 
      <NavLink className="btn" to={baseUrl}>
        Annuler
      </NavLink>
    </div>
  </form>
);
 
<<M AA>>EditForm.propTypes = {
  handleSubmit: PropTypes.func.isRequired,
  baseUrl: PropTypes.string.isRequired,
  <<? F tE/hd/pr>>
 
  <<@ F tE/hd f>>
  <<f.model aA>>s: PropTypes.objectOf(PropTypes.shape()),
  <<@>>
  <<?>>
  <<? F tF/hd/pr>>
 
  upFiles: PropTypes.func.isRequired,
  rmFile: PropTypes.func.isRequired,
  <<?>>
};
 
export default reduxForm({
  form: '<<M AA>>EditForm',
  validate: (values = {}) => {
    const errors = {};
 
<<@ F /hd/pr/in f>><<= getError(f, '    ') >><<@>>
 
    return errors;
  },
})<<? F tE+tF/hd/pr>>(connect(
<<? F tE>>
  (state) => ({
    <<@ F tE/hd f>>
    <<f.model aA>>s: state.data.entities.<<f.model aA>>s,
    <<@>>
  }),
<<??>>
  null,
<<?>>
<<? F tF>>
  { upFiles: uploadFiles, rmFile: removeFile },
<<?>>
)(<<M AA>>EditForm));
<<??>>(<<M AA>>EditForm);<<?>>

<<<
function hasType(type, subtype) {
    return root.fields.list.filter(
        f => !f.primary && !f.hidden && !f.internal && (f.type === type || f.subtype === type) && (!subtype || f.subtype !== subtype)
    ).length > 0;
}

function getImportLodash() {
    const imports = new Set([]);
    if (hasType('integer')) imports.add('isInteger');
    if (hasType('number', 'integer')) imports.add('isNumber');
    if (hasType('entity')) imports.add('map');
    if (root.fields.list.filter(f => f.multiple && !f.nullable).length > 0) imports.add('map');
    
    if (imports.size === 0) return '';

    return `import { ${[...imports].join(', ')} } from 'lodash';`;
}

function getImportFieldComponents() {
    const imports = new Set([]);
    if (hasType('phone')) imports.add('CleaveField');
    if (hasType('datetime')) imports.add('DatePickerField');
    if (hasType('file')) imports.add('FileField');
    if (hasType('boolean')) {
        imports.add('SwitchField');
    }
    if (hasType('string')) {
        imports.add('TextField');
        imports.add('RadioField');
        imports.add('SelectField');
    }
    if (hasType('number')) {
        imports.add('NumberField');
    }
    if (hasType('entity')) imports.add('SelectField');
    if (hasType('text') || hasType('rich')) imports.add('TextAreaField');
    if (root.properties.hasMultiple) {
        imports.add('CheckboxGroupField');
        imports.add('ArrayField');
    }

    return [...imports].join(', ');
}

function getComponent(field) {
    var customPropsTypes = {
        string: `<Field name="${field.names.snake}" component={TextField} placeholder="${field.names.capital}" className="col-12" />`,
        email: `<Field name="${field.names.snake}" component={TextField} type="email" placeholder="${field.names.capital}" className="col-12" />`,
        password: `<Field name="${field.names.snake}" component={TextField} type="password" placeholder="${field.names.capital}" className="col-12" />`,
        phone: `<Field
        name="${field.names.snake}"
        component={CleaveField}
        placeholder="${field.names.capital}"
        className="col-12"
        cleaveOptions={{ phone: true, phoneRegionCode: 'FR' }}
      />`,

        file: `<Field
        name="${field.names.snake}"
        component={FileField}
        uploadFiles={upFiles}
        removeFile={rmFile}
        getUrl={(item) => \`\${UPLOADS_URL}/\${item}\`}
        placeholder="${field.names.capital}"
        className="col-12"\
${field.multiple ? `
        isMulti` : ''}
      />`,

        number: `<Field name="${field.names.snake}" component={NumberField} type="number" placeholder="${field.names.capital}" className="col-12" />`,
        float: `<Field name="${field.names.snake}" component={NumberField} type="number" step={0.01} placeholder="${field.names.capital}" className="col-12" />`,

        boolean: `<Field name="${field.names.snake}" component={SwitchField} label="${field.names.capital}" className="col-12" />`,

        datetime: `<Field name="${field.names.snake}" component={DatePickerField} placeholder="${field.names.capital}" className="col-12" />`,

        text: `<Field name="${field.names.snake}" component={TextAreaField} placeholder="${field.names.capital}" className="col-12" />`,
        rich: `<Field name="${field.names.snake}" component={TextAreaField} isWysiwyg placeholder="${field.names.capital}" className="col-12" />`,

        entity: `<Field
        name="${field.names.snake}"
        component={SelectField}
        options={map(${field.model && field.model.names.camel}s, ${field.model && field.model.names.camel} => ({ value: ${field.model && field.model.names.camel}.${field.model && field.model.fields.primary.names.raw}, label: ${field.model && field.model.names.camel}.${field.model && field.model.fields.lb[0] && field.model.fields.lb[0].names.snake} }))}
        placeholder="${field.names.capital}"
        className="col-12"\
${field.multiple ? `
        isMulti` : ''}
      />`,
    };

    const component = customPropsTypes[field.subtype] || customPropsTypes[field.type] || customPropsTypes['string'];
    if (field.multiple && field.type !== 'entity' && field.type !== 'file') {
        return component.replace('<Field', '<ArrayField').replace('/>', 'addLabel="Ajouter un élément" removable />');
    }
    return component;
}

function getError (field, indent) {
    let errors = '';
    if (field.multiple) {
        if (!field.nullable) {
            errors += `${indent}if (!values.${field.names.snake} || values.${field.names.snake}.length === 0) errors.${field.names.snake} = { _error: 'Can\\'t be empty' };
    else {
      errors.${field.names.snake} = [];
      map(values.${field.names.snake}, (value, key) => {
        if (!value) errors.${field.names.snake}[key] = 'Can\\'t be empty';
      });
    }\n`;
        }
        errors += `${indent}if (!Array.isArray(values.${field.names.snake})) errors.${field.names.snake} = { _error: 'Must be an array' };\n`;
        return errors;
    }

    const nullable = field.nullable ? `values.${field.names.snake} && ` : '';
    const customPropsTypes = {
        email: `if (${nullable}!isEmail(values.${field.names.snake} || '')) errors.${field.names.snake} = 'Is not an email';`,
        number: `if (${nullable}!isNumber(values.${field.names.snake})) errors.${field.names.snake} = 'Is not a number';`,
        integer: `if (${nullable}!isInteger(values.${field.names.snake})) errors.${field.names.snake} = 'Is not an integer';`,
        float: `if (${nullable}!isNumber(values.${field.names.snake})) errors.${field.names.snake} = 'Is not a float';`,
        boolean: `if (${nullable}!(values.${field.names.snake} === false || values.${field.names.snake} === true)) errors.${field.names.snake} = 'Is not a boolean';`,
    };
    if (customPropsTypes[field.subtype] || customPropsTypes[field.type]) {
        errors += `${indent}${customPropsTypes[field.subtype] || customPropsTypes[field.type]}\n`;
    } else if (!field.nullable) {
        errors += `${indent}if (!values.${field.names.snake}) errors.${field.names.snake} = 'Can\\'t be empty';\n`;
    }
    
    return errors;
}
>>>
