import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { withRouter, Switch, Route } from 'react-router-dom';
import { keys<<if Fields embedded>>, map, get<<endif>> } from 'lodash';
import Modal from 'antd/lib/modal';
 
import { create<<Model pascal>>, update<<Model pascal>>, delete<<Model pascal>> } from '../../store/modules/entities/<<Model camel>>s';
 
import BaseLayout from '../shared/BaseLayout';
 
import <<Model pascal>>DetailView from '../../components/<<Model camel>>s/<<Model pascal>>DetailView';
import <<Model pascal>>EditForm from '../../components/<<Model camel>>s/<<Model pascal>>EditForm';
import <<Model pascal>>sTableListView from '../../components/<<Model camel>>s/<<Model pascal>>sTableListView';
import <<Model pascal>>sCardListView from '../../components/<<Model camel>>s/<<Model pascal>>sCardListView';
 
const modalConf = {
  visible: true,
  footer: null,
};
const modalEditConf = {
  ...modalConf,
  closable: false,
  maskClosable: false,
};
 
const RenderEditDetailsModalsRouter = ({
  url, create<<Model pascal>>, update<<Model pascal>>, del<<Model pascal>>, push, <<Model camel>>s,
}) => (
  <Switch>
    <Route
      exact
      path={`${url}/new`}
      render={() => (
        <Modal {...modalEditConf} onCancel={() => push(url)}>
          <<<Model pascal>>EditForm
            initialValues={{}}
            onSubmit={(v) => {
              create<<Model pascal>>(v)
              .then(() => push(url));
            }}
            baseUrl={url}
          />
        </Modal>
      )}
    />
    <Route
      exact
      path={`${url}/:<<Model camel>>Id/edit`}
      render={(subProps) => (
        <Modal {...modalEditConf} onCancel={() => push(url)}>
          <<<Model pascal>>EditForm
            enableReinitialize
            initialValues={<<= getInitialValues('subProps.match') >>}
            onSubmit={(v) => {
              update<<Model pascal>>(v)
              .then(() => push(url));
            }}
            baseUrl={url}
          />
        </Modal>
      )}
    />
    <Route
      exact
      path={`${url}/:<<Model camel>>Id`}
      render={(subProps) => (
        <Modal {...modalConf} onCancel={() => push(url)}>
          <<<Model pascal>>DetailView
            <<Model camel>>={<<Model camel>>s[subProps.match.params.<<Model camel>>Id]}
            baseUrl={url}
            onClickDelete={() => {
              del<<Model pascal>>(subProps.match.params.<<Model camel>>Id)
              .then(() => push(url));
            }}
          />
        </Modal>
      )}
    />
  </Switch>
);
 
RenderEditDetailsModalsRouter.propTypes = {
  url: PropTypes.string.isRequired,
  create<<Model pascal>>: PropTypes.func.isRequired,
  update<<Model pascal>>: PropTypes.func.isRequired,
  del<<Model pascal>>: PropTypes.func.isRequired,
  push: PropTypes.func.isRequired,
  <<Model camel>>s: PropTypes.objectOf(PropTypes.shape()).isRequired,
};
 
const <<Model pascal>>sContainer = ({
  match: { url }, history: { push }, <<Model camel>>s, ...props
}) => (
  <BaseLayout title="<<Model pascal>>sContainer">
    <Switch>
      <Route
        path={`${url}/cards`}
        render={({ match }) => (
          <>
            <<<Model pascal>>sCardListView
              <<Model camel>>s={<<Model camel>>s}
              baseUrl={match.url}
              onClickDelete={(<<Model camel>>Id) => {
                props.delete<<Model pascal>>(<<Model camel>>Id)
                .then(() => push(match.url));
              }}
            />
            <RenderEditDetailsModalsRouter
              url={match.url}
              create<<Model pascal>>={props.create<<Model pascal>>}
              update<<Model pascal>>={props.update<<Model pascal>>}
              del<<Model pascal>>={props.delete<<Model pascal>>}
              push={push}
              <<Model camel>>s={<<Model camel>>s}
            />
          </>
        )}
      />
      <Route
        path={`${url}/table`}
        render={({ match }) => (
          <>
            <<<Model pascal>>sTableListView
              <<Model camel>>s={<<Model camel>>s}
              baseUrl={match.url}
              onClickDelete={(<<Model camel>>Id) => {
                props.delete<<Model pascal>>(<<Model camel>>Id)
                .then(() => push(match.url));
              }}
            />
            <RenderEditDetailsModalsRouter
              url={match.url}
              create<<Model pascal>>={props.create<<Model pascal>>}
              update<<Model pascal>>={props.update<<Model pascal>>}
              del<<Model pascal>>={props.delete<<Model pascal>>}
              push={push}
              <<Model camel>>s={<<Model camel>>s}
            />
          </>
        )}
      />
      <Route
        exact
        path={`${url}/new`}
        render={() => (
          <<<Model pascal>>EditForm
            initialValues={{}}
            onSubmit={(v) => {
              props.create<<Model pascal>>(v)
              .then(({ response }) => push(`${url}/${keys(response.entities.<<Model camel>>s)[0]}`));
            }}
            baseUrl={url}
          />
        )}
      />
      <Route
        exact
        path={`${url}/:<<Model camel>>Id/edit`}
        render={({ match }) => (
          <<<Model pascal>>EditForm
            enableReinitialize
            initialValues={<<= getInitialValues('match') >>}
            onSubmit={(v) => {
              props.update<<Model pascal>>(v)
              .then(() => push(`${url}/${match.params.<<Model camel>>Id}`));
            }}
            baseUrl={url}
          />
        )}
      />
      <Route
        exact
        path={`${url}/:<<Model camel>>Id`}
        render={({ match }) => (
          <<<Model pascal>>DetailView
            <<Model camel>>={<<Model camel>>s[match.params.<<Model camel>>Id]}
            baseUrl={url}
            onClickDelete={() => {
              props.delete<<Model pascal>>(match.params.<<Model camel>>Id)
              .then(() => push(url));
            }}
          />
        )}
      />
    </Switch>
  </BaseLayout>
);
 
<<Model pascal>>sContainer.propTypes = {
  create<<Model pascal>>: PropTypes.func.isRequired,
  update<<Model pascal>>: PropTypes.func.isRequired,
  delete<<Model pascal>>: PropTypes.func.isRequired,
 
  <<Model camel>>s: PropTypes.objectOf(PropTypes.shape()).isRequired,
 
  match: PropTypes.shape({
    url: PropTypes.string.isRequired,
  }).isRequired,
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
  }).isRequired,
};
 
export default connect(
  (state) => ({
    <<Model camel>>s: state.data.entities.<<Model camel>>s,
  }),
  { create<<Model pascal>>, update<<Model pascal>>, delete<<Model pascal>> },
)(withRouter(<<Model pascal>>sContainer));

<<<
function getInitialValues(match) {
    return root.fields.list.filter(f => f.embedded === true).length > 0
        ? `{
              ...${root.names.camel}s[${match}.params.${root.names.camel}Id],
              ${root.fields.list.filter(f => f.embedded === true).map(f => `${f.names.snake}: map(get(${root.names.camel}s[${match}.params.${root.names.camel}Id], '${f.names.snake}'), '${f.model.fields.primary.names.raw}')`)},
            }`
        : `${root.names.camel}s[${match}.params.${root.names.camel}Id]`;
}
>>>
