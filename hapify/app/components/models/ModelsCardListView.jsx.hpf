import React from 'react';
import PropTypes from 'prop-types';
import { NavLink } from 'react-router-dom';
<<? F tE/hd/pr>>
import { connect } from 'react-redux';
<<?>>
import { capitalize<<? F tE/hd/pr>>, get<<?>><<? F ml/hd>>, map<<?>> } from 'lodash';
<<? F tD/hd/pr>>
import moment from 'moment';
<<?>>
import { ButtonConfirmModal } from 'react-components';

<<= getImportConstants() >>
 
import CardListView from '../shared/CardListView';
 
const <<M AA>>sCardListView = ({
  <<M aA>>s, baseUrl, onClickDelete<<@ D /em d>>, <<d aA>>s<<@>>,
}) => (
  <CardListView
    title="<<M A>> Card Display"
    className="card-list-<<M aA>>s"
    data={<<M aA>>s}
    cardComponent={(<<M aA>>) => (
      <div className="col-3_xs-12_sm-6_md-4">
        <div className="card box picture-bg">
          <<@ F tFi/hd f>>
          <div className="card-header-picture">
            <<= renderProp(f) >>
          </div>
          <<@>>
          <div className="box-content">
            <div className="card-overlay">
              <div className="grid">
                <<@ F /hd/tFi f>>
                <div className="col-12">
                  <<= renderProp(f) >>
                </div>
                <<@>>
              </div>
              <div className="card-overlay-mask">
                <div />
              </div>
            </div>
            <div className="card-actions btn-group">
              <NavLink to={`${baseUrl}/${<<M aA>>.<<P R>>}/edit`} className="btn">
                <i className="far fa-pencil" />
                <span>Modifier</span>
              </NavLink>
              {onClickDelete && (
                <ButtonConfirmModal
                  onConfirmationButton={() => onClickDelete(<<M aA>>.<<P R>>)}
                  message="Voulez-vous vraiment effacer le <<M A>> ?"
                >
                  <button className="btn" type="button">
                    <i className="far fa-trash" />
                    <span>Supprimer</span>
                  </button>
                </ButtonConfirmModal>
              )}
            </div>
          </div>
        </div>
      </div>
    )}
    <<= getSearch(root.fields)>>
    searchLabel="Rechercher un <<M A>>"
    <<= getSort(root.fields)>>
    buttons={(
      <div>
        <NavLink className="btn" to={`${baseUrl}/new`}>
          Cr√©er un <<M A>>
        </NavLink>
      </div>
    )}
  />
);
 
<<M AA>>sCardListView.propTypes = {
  <<M aA>>s: PropTypes.objectOf(PropTypes.shape({
    <<@ F /hd f>>
    <<f a_a>>: PropTypes.<<= getPropsType(f) >><<? f /nu>>.isRequired<<?>>,
    <<@>>
  })).isRequired,
  <<? F tE/hd/pr>>
 
  <<@ D /em d>>
  <<d aA>>s: PropTypes.objectOf(PropTypes.shape()),
  <<@>>
  <<?>>
 
  baseUrl: PropTypes.string.isRequired,
  onClickDelete: PropTypes.func,
};
 
export default <<? F tE>>\
connect(
  (state) => ({
    <<@ D /em d>>
    <<d aA>>s: state.data.entities.<<d aA>>s,
    <<@>>
  }),
)\
<<?>>(<<M AA>>sCardListView);

<<<
function hasType(type) {
    return root.fields.list.filter(f => f.type === type || f.subtype === type).length > 0;
}

function getImportConstants() {
    const imports = new Set([]);
    if (hasType('datetime')) imports.add('DATE_FORMAT');
    if (hasType('file')) imports.add('UPLOADS_URL');

    return imports.size > 0
        ? `\rimport { ${[...imports].join(', ')} } from '../../configs/Constants';`
        : '';
}

function getPropsType(field) {
    var customPropsTypes = {
        datetime: 'number',
        boolean: 'bool',
        entity: 'string',
        file: 'string',
    };

    const component = customPropsTypes[field.subtype] || customPropsTypes[field.type] || field.type;
    if (field.multiple) {
        return `arrayOf(PropTypes.${component}${field.nullable ? '' : '.isRequired'})`;
    }
    return component;
}

function renderProp(field) {
    if (field.multiple) {
        render = `(val) => capitalize(val)`;
        if (field.subtype === 'image') {
            render = `(val) => <img src={\`\${UPLOADS_URL}/\${val}\`} alt={val} />`;
        } else if (field.type === 'file') {
            render = `(val) => <a href={\`\${UPLOADS_URL}/\${val}\`} target="_blank" rel="noopener noreferrer">{val}</a>`;
        } else if (field.type === 'entity' && !field.embedded) {
            render = `(val) => get(${field.model.names.camel}s, \`\${val}.${field.model.fields.lb[0] ? field.model.fields.lb[0].names.snake : field.model.fields.primary.names.raw}\`)`;
        } else if (field.type === 'entity' && field.embedded) {
            render = `(val) => val.${field.model.fields.lb[0] ? field.model.fields.lb[0].names.snake : field.model.fields.primary.names.raw}`;
        } else if (field.type === 'datetime') {
            render = `(val) => moment(val).format(DATE_FORMAT)`;
        }
        return `{map(<<M aA>>.${field.names.snake}, ${render}).join(', ')}`;
    }
    
    if (field.subtype === 'image') {
        return `<img src={\`\${UPLOADS_URL}/\${<<M aA>>.${field.names.snake}}\`} alt={<<M aA>>.${field.names.snake}} />`;
    } else if (field.type === 'file') {
        return `<a href={\`\${UPLOADS_URL}/\${<<M aA>>.${field.names.snake}}\`} target="_blank" rel="noopener noreferrer">{<<M aA>>.${field.names.snake}}</a>`;
    } else if (field.type === 'entity' && !field.embedded) {
        return `{get(${field.model.names.camel}s, \`\${<<M aA>>.${field.names.snake}}.${field.model.fields.lb[0] ? field.model.fields.lb[0].names.snake : field.model.fields.primary.names.raw}\`)}`;
    } else if (field.type === 'entity' && field.embedded) {
        return `{<<M aA>>.${field.names.snake}.${field.model.fields.lb[0] ? field.model.fields.lb[0].names.snake : field.model.fields.primary.names.raw}}`;
    } else if (field.type === 'datetime') {
        return `{moment(<<M aA>>.${field.names.snake}).format(DATE_FORMAT)}`;
    }
    return `{capitalize(<<M aA>>.${field.names.snake})}`;
}

function getSearch(fields) {
    if (fields.lb && fields.lb.length > 1) {
        return `search={['${fields.lb.map((lb) => lb.names.snake).join("', '")}']}`;
    } else if (fields.lb && fields.lb.length === 1) {
        return `search="${fields.lb[0].names.snake}"`;
    }
    return '';
}
function getSort(fields) {
    if (fields.lb && fields.lb.length > 0) {
        return `sortByDefault="${fields.lb[0].names.snake}"
    sortOrderDefault="desc"`;
    }
    return '';
}
>>>
