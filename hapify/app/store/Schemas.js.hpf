import { schema } from 'normalizr';
 
// We use this Normalizr schemas to transform API responses from a nested form
// to a flat form where repos and users are placed in `entities`, and nested
// JSON objects are replaced with their IDs. This is very convenient for
// consumption by reducers, because we can easily build a normalized tree
// and keep it updated as we fetch more data.
 
// Read more about Normalizr: https://github.com/gaearon/normalizr
 
<<@ M /pMHd m>>
const <<m aA>>Schema = new schema.Entity('<<m aA>>s', {}, { idAttribute: '<<m.fields.primary R>>' });
<<@>>
 
// Schemas for API responses.
export const Schemas = {
  <<@ M /pMHd m>>
  <<m A_A>>: <<m aA>>Schema,
  <<m A_A>>_ARRAY: new schema.Array(<<m aA>>Schema),
  <<@>>
};
 
// Action key that carries API call info interpreted by this Redux middleware.
export const CALL_API = Symbol('Call API');
